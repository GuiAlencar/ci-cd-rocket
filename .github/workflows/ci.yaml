name: CI

on: 
  push:
    branches:
    - main

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: 'Build and Push'
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node: [ 18, 20 ]

    steps:
    - uses: actions/checkout@v4

    # - name: Setup node | ${{ matrix.node }}
    - name: Setup node 
      uses: actions/setup-node@v4
      with:
        # node-version: ${{ matrix.node }}
        node-version: 18
        cache: 'yarn'
    - run: yarn
    - run: yarn run test

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      env:
        # gerar o token no github e adicionar ele na secrets and variables como GH_TOKEN
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Generate tag
      id: generate_tag
      run: |
        SHA=$(echo $GITHUB_SHA | head -c7)
        echo "sha=$SHA" >> $GITHUB_OUTPUT
# ==========================================================================================
# Envia imagem para o dockerhub
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}

    # - name: Build and push
    #   uses: docker/build-push-action@v6
    #   with:
    #     push: true
    #     tags: guilherme1212/rocketseat-ci-api:${{ steps.generate_tag.outputs.sha }}, guilherme1212/rocketseat-ci-api:latest

    # - name: Build docker image
    #   run: docker build -t guilherme1212/rocketseat-ci-api:${{ steps.generate_tag.outputs.sha }} .

    # - name: Push image
    #   run: |
    #     docker push guilherme1212/rocketseat-ci-api:${{ steps.generate_tag.outputs.sha }}
# ==========================================================================================

# ==========================================================================================
# AWS
# OIDC(open id connect) Audience
# envia a imagem docker para aws ECR
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        # arn fictÃ­cio para exemplo 
        role-to-assume: arn:aws:iam::123456789100:role/ecr-role
        aws-region: us-east-2

    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build docker image
      id: build-docker-image
      ENV:
        REGISTRY: ${{steps.login-ecr.outputs.registry}}
        TAG: ${{ steps.generate_tag.outputs.sha }}
      # ir no ECR para pegar esse username
      run: |
        docker build -t $REGISTRY/rocketseat-ci:$TAG .
        docker push $REGISTRY/rocketseat-ci:$TAG
        docker tag $REGISTRY/rocketseat-ci:$TAG $REGISTRY/rocketseat-ci:latest
        docker push $REGISTRY/rocketseat-ci:latest
      # para usar no app runner
        IMAGE=$(echo $REGISTRY/rocketseat-ci:$TAG)
        echo "image=$IMAGE" >> $GITHUB_OUTPUT

      #  docker build -t 403429280851.dkr.ecr.us-east-2.amazonaws.com/rocketseat-ci:${{ steps.generate_tag.outputs.sha }} .
      #  docker push 403429280851.dkr.ecr.us-east-2.amazonaws.com/rocketseat-ci:${{ steps.generate_tag.outputs.sha }}
# --------------------------------------------------
# aqui faz deploy no App Runner
    - name: Deploy to App Runner
      id: deploy-app-runner
      uses: awslabs/amazon-app-runner-deploy@main
      with:
        service: rocketseat-api
        image: ${{ steps.build-docker-image.outputs.image}}
        # copiar o arn da role, app-runner-role
        access-role-arn: arn:aws:iam::403429280851:role/app-runner-role
        region: us-east-2
        cpu: 1
        memory: 2
        port: 3000
        wait-for-service-stability-seconds: 120
    
    - name: App Runner check
      run: echo "App Runner running... {{ stpes.deploy-app-runner.outputs.service-url }}"
# ==========================================================================================